<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog</title>
  
  <subtitle>luke developer</subtitle>
  <link href="https://techub.pw/atom.xml" rel="self"/>
  
  <link href="https://techub.pw/"/>
  <updated>2021-07-12T02:53:55.201Z</updated>
  <id>https://techub.pw/</id>
  
  <author>
    <name>Luke44</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>通过换硬币例题来入门动态规划</title>
    <link href="https://techub.pw/2021/03/25/algorithms/note-of-dynamic-programming/"/>
    <id>https://techub.pw/2021/03/25/algorithms/note-of-dynamic-programming/</id>
    <published>2021-03-25T09:02:47.000Z</published>
    <updated>2021-07-12T02:53:55.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是动态规划"><a href="#什么是动态规划" class="headerlink" title="什么是动态规划"></a>什么是动态规划</h2><p>动态规划（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。</p><p>动态规划常常适用于有 <strong>重叠子问题</strong> 和 <strong>最优子结构性质</strong> 的问题，动态规划方法所耗时间往往远少于朴素解法。</p><p>– 摘自 leetcode</p><h2 id="什么题目适合使用动态规划来解"><a href="#什么题目适合使用动态规划来解" class="headerlink" title="什么题目适合使用动态规划来解"></a>什么题目适合使用动态规划来解</h2><ol><li>求最值</li><li>计数</li><li>是否存在</li></ol><p><strong>大概率</strong>可以用动态规划来做</p><h2 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h2><ol><li><p>确定状态</p></li><li><p>写出转移方程</p></li><li><p>初始条件和边界</p></li><li><p>计算顺序</p></li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><ul><li>有面值为 2、5、7 无限多枚的硬币，问组成面值 27 最少需要多少枚？</li></ul><p>假设最少需要 k 枚, a1+a2+a3+…+ak=27, f(27) = k</p><p>最后一枚面值是 ak, 所以组成面值 27-ak 最少需要 k-1 枚, f(27-ak) = k-1</p><p>而最后一枚只可能是 2/5/7，总的最少枚数应该是这三种情况的最小值</p><p>写出方程，对于要组成任意 x 的面值 f(x) = min{f(x-2)+1, f(x-5)+1, f(x-7)+1}</p><p>已知，初始条件 f(0) = 0，如果能知道 f(1) f(2) .. f(20) f(21) f(22) …的值，就能轻松算出 f(27) 来，所以如果能从前往后把结果先算出来，到 27 时就可以迅速得到答案</p><p>以下是代码:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">coinChange</span><span class="params">(coins []<span class="keyword">int</span>, m <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="comment">//开辟一个27大小的整形切片</span></span><br><span class="line">    dp := <span class="built_in">make</span>([]<span class="keyword">int</span>, m+<span class="number">1</span>)</span><br><span class="line">    <span class="comment">//已知组成0的面值需要0枚</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    n := <span class="built_in">len</span>(coins)</span><br><span class="line">    <span class="comment">//从面值1开始往27计算</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= m; i++ &#123;</span><br><span class="line">        <span class="comment">//初始为最大值，后面更新最小值</span></span><br><span class="line">        dp[i] = math.MaxInt64</span><br><span class="line">        <span class="comment">//遍历每种硬币的情况</span></span><br><span class="line">        <span class="keyword">for</span> j := <span class="number">0</span>; j &lt; n; j++ &#123;</span><br><span class="line">            <span class="comment">//注意边界</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= coins[j] &amp;&amp; dp[i-coins[j]] != math.MaxInt64 &#123;</span><br><span class="line">                dp[i] = min(dp[i-coins[j]]+<span class="number">1</span>, dp[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> dp[m] == math.MaxInt64 &#123;</span><br><span class="line">        dp[m] = <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[m]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">min</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt;= b &#123;</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是动态规划&quot;&gt;&lt;a href=&quot;#什么是动态规划&quot; class=&quot;headerlink&quot; title=&quot;什么是动态规划&quot;&gt;&lt;/a&gt;什么是动态规划&lt;/h2&gt;&lt;p&gt;动态规划（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科</summary>
      
    
    
    
    <category term="算法" scheme="https://techub.pw/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="动态规划" scheme="https://techub.pw/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本快速入门</title>
    <link href="https://techub.pw/2021/03/19/notes/shell-quick-start/"/>
    <id>https://techub.pw/2021/03/19/notes/shell-quick-start/</id>
    <published>2021-03-19T18:02:47.000Z</published>
    <updated>2021-07-12T02:53:55.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>定义变量</p><p>拼接变量</p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>if</p><p>swith</p><h2 id="Makefile"><a href="#Makefile" class="headerlink" title="Makefile"></a>Makefile</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;起步&quot;&gt;&lt;a href=&quot;#起步&quot; class=&quot;headerlink&quot; title=&quot;起步&quot;&gt;&lt;/a&gt;起步&lt;/h2&gt;&lt;h2 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h2&gt;&lt;p&gt;定义变</summary>
      
    
    
    
    <category term="随笔" scheme="https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>centos安装并使用无头浏览器puppeteer</title>
    <link href="https://techub.pw/2021/02/22/notes/centos-install-puppeteer/"/>
    <id>https://techub.pw/2021/02/22/notes/centos-install-puppeteer/</id>
    <published>2021-02-22T09:02:47.000Z</published>
    <updated>2021-07-12T02:53:55.201Z</updated>
    
    <content type="html"><![CDATA[<p>puppeteer 在做复杂的爬虫时特别好用，centos 安装时坑比较多，本文记录一下安装过程，以及一些使用技巧</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 <code>npm install puppeteer</code> 在 centos 上安装依赖，官方文档说会自动下载 chromium 浏览器，如果没有安装，可以使用 <code>node node_modules/puppeteer/install.js</code> 来安装</p><p>继续使用时可能报依赖缺失错误，根据官方文档可以安装一下下面这些依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo yum install -y alsa-lib.x86_64 atk.x86_64 cups-libs.x86_64 gtk3.x86_64 \</span><br><span class="line"> ipa-gothic-fonts libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 \</span><br><span class="line">  libXi.x86_64 libXrandr.x86_64 libXScrnSaver.x86_64 libXtst.x86_64 pango.x86_64 \</span><br><span class="line">   xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-fonts-cyrillic xorg-x11-fonts-misc \</span><br><span class="line">    xorg-x11-fonts-Type1 xorg-x11-utils</span><br><span class="line">$ sudo yum update nss -y</span><br></pre></td></tr></table></figure><p>对于启动时报的 <code>No usable sandbox</code> 错误，可以在启动参数加上 <code>--no-sandbox --disable-setuid-sandbox</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(</span><br><span class="line">    &#123;</span><br><span class="line">        userDataDir: chrome_user_data_directory,</span><br><span class="line">        args: [</span><br><span class="line">            <span class="string">&#x27;--no-sandbox&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;--disable-setuid-sandbox&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>继续使用时确实可以启动浏览器，但是截图发现字体有缺失，安装一下应该可以正常使用了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groupinstall <span class="string">&quot;fonts&quot;</span> -y</span><br></pre></td></tr></table></figure><h2 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h2><ol><li>防止被检测</li></ol><p>登录谷歌时，我发现谷歌能检测到使用不安全的浏览器不给登录，这时候可以使用 <code>puppeteer-extra</code> 库搭配 <code>puppeteer-extra-plugin-stealth</code> 插件来防止被谷歌检测到，使用很简单</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 npm 安装 puppeteer-extra, puppeteer-extra-plugin-stealth</span></span><br><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> StealthPlugin = <span class="built_in">require</span>(<span class="string">&#x27;puppeteer-extra-plugin-stealth&#x27;</span>)</span><br><span class="line">puppeteer.use(StealthPlugin())</span><br><span class="line"><span class="comment">// your puppeterr code ...</span></span><br></pre></td></tr></table></figure><ol start="2"><li>缓存用户信息</li></ol><p>使用过程中发现每次运行脚本如果需要登录都必须登录一次，非常麻烦，这时可以通过配置用户目录来实现缓存用户信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// windows</span></span><br><span class="line"><span class="comment">//const chrome_user_data_directory = &#x27;C:\\Users\\&lt;user_name&gt;\\AppData\\Local\\Chromium\\User Data&#x27;;</span></span><br><span class="line"><span class="comment">// linux</span></span><br><span class="line"><span class="keyword">const</span> chrome_user_data_directory = <span class="string">&#x27;/home/&lt;user_name&gt;/.config/chromium&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(</span><br><span class="line">    &#123;</span><br><span class="line">        userDataDir: chrome_user_data_directory</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="3"><li>设置代理</li></ol><p>通过启动参数设置代理，如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(</span><br><span class="line">    &#123;</span><br><span class="line">        args: [</span><br><span class="line">        <span class="string">&#x27;--proxy-server=127.0.0.1:9876&#x27;</span>,</span><br><span class="line">        <span class="comment">// Use proxy for localhost URLs</span></span><br><span class="line">        <span class="string">&#x27;--proxy-bypass-list=&lt;-loopback&gt;&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ol start="4"><li>等待页面跳转完成</li></ol><p>有的页面需要跳转，需要等待完全跳转完才继续进行下一步操作时可以用 <code>page.waitForNavigation</code> 完成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> navigationPromise = page.waitForNavigation();</span><br><span class="line"><span class="keyword">await</span> navigationPromise;</span><br><span class="line"><span class="comment">// 多次使用 await navigationPromise;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>直到完全打开一个页面</li></ol><p>使用 <code>page.goto(url, options)</code> 打开一个页面时，可以通过 options 对象配置超时时间 timeout(单位毫秒)，waitUntil 配置什么时候算打开完成，选项有</p><ul><li>load - 页面的load事件触发时</li><li>domcontentloaded - 页面的 DOMContentLoaded 事件触发时</li><li>networkidle0 - 不再有网络连接时触发（至少500毫秒后）</li><li>networkidle2 - 只有2个网络连接时触发（至少500毫秒后）</li></ul><ol start="6"><li>页面内执行 js 方法</li></ol><p>有时候想在页面执行一段 js 方法，比如模拟下拉，可以使用 <code>page.evaluate</code> 方法，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入 num 用来限制滚动多少秒</span></span><br><span class="line">page.evaluate(<span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> distance = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//滚动条向下滚动 distance</span></span><br><span class="line">        <span class="built_in">window</span>.scrollBy(<span class="number">0</span>, distance);</span><br><span class="line">        times += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> (times &gt;= num) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, num)</span><br></pre></td></tr></table></figure><p>未完待续~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;puppeteer 在做复杂的爬虫时特别好用，centos 安装时坑比较多，本文记录一下安装过程，以及一些使用技巧&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;使用 &lt;c</summary>
      
    
    
    
    <category term="随笔" scheme="https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用github-action自动部署hexo博客，并配置免费cdn加速访问</title>
    <link href="https://techub.pw/2021/02/14/notes/use-github-action-and-jsdelivr-cdn-to-auto-deploy-and-speed-up-hexo-blog/"/>
    <id>https://techub.pw/2021/02/14/notes/use-github-action-and-jsdelivr-cdn-to-auto-deploy-and-speed-up-hexo-blog/</id>
    <published>2021-02-14T09:02:47.000Z</published>
    <updated>2021-07-12T02:53:55.205Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h2><ol><li><p>按照官方文档创建一个博客 <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p></li><li><p>创建两个仓库，一个名为 <code>blog_name</code> 的仓库用来放 hexo 博客原始文件，一个名为 <code>your_github_name.github.io</code> 的仓库用来放生成好的静态站点</p></li><li><p>修改 <code>_config.yml</code> 文件的 <code>deploy</code> 配置</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;git@github.com:your_github_name/your_github_name.github.io.git&#x27;</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&#x27;master&#x27;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>在本地执行 <code>hexo deploy</code> 后就会自动在本地生成静态文件并推送到 <code>your_github_name.github.io</code> 这个仓库，然后在该仓库的设置中开启 <code>GitHub Pages</code>，随后访问 <a href="http://your_github_name.github.io/">http://your_github_name.github.io</a> 就能看到你的博客</li></ol><h2 id="编写-github-action"><a href="#编写-github-action" class="headerlink" title="编写 github action"></a>编写 github action</h2><p><strong><em>github action</em></strong> 是 github 官方的 ci 工具，可以利用它实现推送 <code>blog_name</code> 仓库时，自动借助 github 的机器远程执行 <code>hexo deploy</code> 来部署博客，这样只需要写完博客推送一下就行</p><p>在远程机器上要推送，需要配置一下 <code>deploy key</code>，但是为了防止直接写在配置文件中被别人获取，可以填写在 <code>blog_name</code> 仓库的 <code>设置=&gt;Secrets</code> 中，Key 为 <code>ACTION_DEPLOY_KEY</code>，Value 为 <code>~/.ssh/id_rsa</code> 中的内容</p><p>在 <code>blog_name</code> 仓库页 <code>Actions</code> 页面新建一个 workflow 文件，填入下面的内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">Blog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span> [<span class="string">push</span>] <span class="comment"># 当有新push时运行</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># 一项叫做build的任务</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span> <span class="comment"># 在最新版的Ubuntu系统下运行</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment"># 将仓库内master分支的内容下载到工作目录</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span> <span class="comment"># 脚本来自 https://github.com/actions/checkout</span></span><br><span class="line">      </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="number">10.</span><span class="string">x</span> <span class="comment"># 配置Node环境</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span> <span class="comment"># 配置脚本来自 https://github.com/actions/setup-node</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">node-version:</span> <span class="string">&quot;10.x&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">Hexo</span> <span class="string">env</span></span><br><span class="line">      <span class="attr">env:</span></span><br><span class="line">        <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACTION_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="comment"># set up private key for deploy</span></span><br><span class="line">        <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">        <span class="string">echo</span> <span class="string">&quot;$ACTION_DEPLOY_KEY&quot;</span> <span class="string">|</span> <span class="string">tr</span> <span class="string">-d</span> <span class="string">&#x27;\r&#x27;</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span> <span class="comment"># 配置秘钥</span></span><br><span class="line">        <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">        <span class="string">ssh-keyscan</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">        <span class="comment"># set git infomation</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">&#x27;your_name&#x27;</span> <span class="comment"># 换成你自己的邮箱和名字</span></span><br><span class="line">        <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">&#x27;your_name@email.com&#x27;</span></span><br><span class="line">        <span class="comment"># install dependencies</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span> <span class="string">-g</span> <span class="string">hexo-cli</span> <span class="comment"># 安装hexo</span></span><br><span class="line">        <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">  </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">        <span class="comment"># publish</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        <span class="comment"># 执行部署程序</span></span><br><span class="line">        <span class="string">hexo</span> <span class="string">deploy</span> </span><br></pre></td></tr></table></figure><h2 id="配置-cdn-和自定义域名"><a href="#配置-cdn-和自定义域名" class="headerlink" title="配置 cdn 和自定义域名"></a>配置 cdn 和自定义域名</h2><p>完成上面两步就能实现推送博客仓库时，自动部署静态站点的工作</p><p>访问博客过程中发现 github 的速度较慢，于是借助免费 cdn jsdelivr 来加速一些静态资源，github 仓库中的文件天然就能通过 jsdelivr链接访问到，比如你的 <code>your_github_name.github.io</code> 仓库中的 <code>css/style.css</code> 文件对应的 jsdelivr 链接就是 <code>https://cdn.jsdelivr.net/gh/your_github_name/your_github_name.github.io@master/css/style.css</code></p><p>利用上述 cdn 原理，可以在 <code>hexo generate</code> 后通过替换 html 代码中资源链接的方式来使用 cdn，比如我要替换 js 的路径，使用 sed 命令将所有 html 文件中 <code>/src=&quot;/js</code> 开头的资源文件前面替换加上 jsdelivr 的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ find . -<span class="built_in">type</span> f -name *.html | \</span><br><span class="line">xargs sed -i <span class="string">&#x27;s/src=&quot;\/js\//src=&quot;https:\/\/cdn.jsdelivr.net\/gh\/your_github_name/your_github_name.github.io@master\/js\//g&#x27;</span></span><br></pre></td></tr></table></figure><p>同理可以替换 css 等其他资源，将相关代码填在 actions 中 <code>hexo generate</code> 和 <code>hexo deploy</code> 之间，在 action 执行的时候会完成替换</p><p>另外，如果想要配置自定义域名，需要在域名中添加一条 cname 的解析指向 your_github_name.github.io 域名，并在站点 source 目录中添加一个 CNAME 文件并填上你的域名，最后在 <code>GitHub Pages</code> 设置中填上并开启自定义域名</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装-hexo&quot;&gt;&lt;a href=&quot;#安装-hexo&quot; class=&quot;headerlink&quot; title=&quot;安装 hexo&quot;&gt;&lt;/a&gt;安装 hexo&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按照官方文档创建一个博客 &lt;a href=&quot;https://hexo.io/zh-</summary>
      
    
    
    
    <category term="随笔" scheme="https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
