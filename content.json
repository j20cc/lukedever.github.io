{"meta":{"title":"Blog","subtitle":"luke developer","description":"","author":"Luke44","url":"https://techub.pw","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2021-07-12T02:53:55.201Z","updated":"2021-07-12T02:53:55.201Z","comments":false,"path":"/404.html","permalink":"https://techub.pw/404.html","excerpt":"","text":""},{"title":"关于","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":false,"path":"about/index.html","permalink":"https://techub.pw/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"书单","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":false,"path":"books/index.html","permalink":"https://techub.pw/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":false,"path":"categories/index.html","permalink":"https://techub.pw/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":true,"path":"links/index.html","permalink":"https://techub.pw/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":false,"path":"repository/index.html","permalink":"https://techub.pw/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2021-07-12T02:53:55.205Z","updated":"2021-07-12T02:53:55.205Z","comments":false,"path":"tags/index.html","permalink":"https://techub.pw/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"通过换硬币例题来入门动态规划","slug":"algorithms/note-of-dynamic-programming","date":"2021-03-25T09:02:47.000Z","updated":"2021-07-12T02:53:55.201Z","comments":true,"path":"2021/03/25/algorithms/note-of-dynamic-programming/","link":"","permalink":"https://techub.pw/2021/03/25/algorithms/note-of-dynamic-programming/","excerpt":"","text":"什么是动态规划动态规划（英语：Dynamic programming，简称 DP）是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 动态规划常常适用于有 重叠子问题 和 最优子结构性质 的问题，动态规划方法所耗时间往往远少于朴素解法。 – 摘自 leetcode 什么题目适合使用动态规划来解 求最值 计数 是否存在 大概率可以用动态规划来做 一般步骤 确定状态 写出转移方程 初始条件和边界 计算顺序 例题 有面值为 2、5、7 无限多枚的硬币，问组成面值 27 最少需要多少枚？ 假设最少需要 k 枚, a1+a2+a3+…+ak=27, f(27) = k 最后一枚面值是 ak, 所以组成面值 27-ak 最少需要 k-1 枚, f(27-ak) = k-1 而最后一枚只可能是 2/5/7，总的最少枚数应该是这三种情况的最小值 写出方程，对于要组成任意 x 的面值 f(x) = min{f(x-2)+1, f(x-5)+1, f(x-7)+1} 已知，初始条件 f(0) = 0，如果能知道 f(1) f(2) .. f(20) f(21) f(22) …的值，就能轻松算出 f(27) 来，所以如果能从前往后把结果先算出来，到 27 时就可以迅速得到答案 以下是代码: 123456789101112131415161718192021222324252627282930313233func coinChange(coins []int, m int) int &#123; //开辟一个27大小的整形切片 dp := make([]int, m+1) //已知组成0的面值需要0枚 dp[0] = 0 n := len(coins) //从面值1开始往27计算 for i := 1; i &lt;= m; i++ &#123; //初始为最大值，后面更新最小值 dp[i] = math.MaxInt64 //遍历每种硬币的情况 for j := 0; j &lt; n; j++ &#123; //注意边界 if i &gt;= coins[j] &amp;&amp; dp[i-coins[j]] != math.MaxInt64 &#123; dp[i] = min(dp[i-coins[j]]+1, dp[i]) &#125; &#125; &#125; if dp[m] == math.MaxInt64 &#123; dp[m] = -1 &#125; return dp[m]&#125;func min(a, b int) int &#123; if a &gt;= b &#123; return b &#125; return a&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://techub.pw/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://techub.pw/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"shell脚本快速入门","slug":"notes/shell-quick-start","date":"2021-03-19T18:02:47.000Z","updated":"2021-07-12T02:53:55.201Z","comments":true,"path":"2021/03/19/notes/shell-quick-start/","link":"","permalink":"https://techub.pw/2021/03/19/notes/shell-quick-start/","excerpt":"","text":"起步变量定义变量 拼接变量 条件if swith Makefile","categories":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"centos安装并使用无头浏览器puppeteer","slug":"notes/centos-install-puppeteer","date":"2021-02-22T09:02:47.000Z","updated":"2021-07-12T02:53:55.201Z","comments":true,"path":"2021/02/22/notes/centos-install-puppeteer/","link":"","permalink":"https://techub.pw/2021/02/22/notes/centos-install-puppeteer/","excerpt":"","text":"puppeteer 在做复杂的爬虫时特别好用，centos 安装时坑比较多，本文记录一下安装过程，以及一些使用技巧 安装使用 npm install puppeteer 在 centos 上安装依赖，官方文档说会自动下载 chromium 浏览器，如果没有安装，可以使用 node node_modules/puppeteer/install.js 来安装 继续使用时可能报依赖缺失错误，根据官方文档可以安装一下下面这些依赖 123456$ sudo yum install -y alsa-lib.x86_64 atk.x86_64 cups-libs.x86_64 gtk3.x86_64 \\ ipa-gothic-fonts libXcomposite.x86_64 libXcursor.x86_64 libXdamage.x86_64 libXext.x86_64 \\ libXi.x86_64 libXrandr.x86_64 libXScrnSaver.x86_64 libXtst.x86_64 pango.x86_64 \\ xorg-x11-fonts-100dpi xorg-x11-fonts-75dpi xorg-x11-fonts-cyrillic xorg-x11-fonts-misc \\ xorg-x11-fonts-Type1 xorg-x11-utils$ sudo yum update nss -y 对于启动时报的 No usable sandbox 错误，可以在启动参数加上 --no-sandbox --disable-setuid-sandbox 123456789const browser = await puppeteer.launch( &#123; userDataDir: chrome_user_data_directory, args: [ &#x27;--no-sandbox&#x27;, &#x27;--disable-setuid-sandbox&#x27;, ], &#125;); 继续使用时确实可以启动浏览器，但是截图发现字体有缺失，安装一下应该可以正常使用了 1sudo yum groupinstall &quot;fonts&quot; -y 使用技巧 防止被检测 登录谷歌时，我发现谷歌能检测到使用不安全的浏览器不给登录，这时候可以使用 puppeteer-extra 库搭配 puppeteer-extra-plugin-stealth 插件来防止被谷歌检测到，使用很简单 12345// 使用 npm 安装 puppeteer-extra, puppeteer-extra-plugin-stealthconst puppeteer = require(&#x27;puppeteer-extra&#x27;)const StealthPlugin = require(&#x27;puppeteer-extra-plugin-stealth&#x27;)puppeteer.use(StealthPlugin())// your puppeterr code ... 缓存用户信息 使用过程中发现每次运行脚本如果需要登录都必须登录一次，非常麻烦，这时可以通过配置用户目录来实现缓存用户信息 123456789// windows//const chrome_user_data_directory = &#x27;C:\\\\Users\\\\&lt;user_name&gt;\\\\AppData\\\\Local\\\\Chromium\\\\User Data&#x27;;// linuxconst chrome_user_data_directory = &#x27;/home/&lt;user_name&gt;/.config/chromium&#x27;;const browser = await puppeteer.launch( &#123; userDataDir: chrome_user_data_directory &#125;); 设置代理 通过启动参数设置代理，如下 123456789const browser = await puppeteer.launch( &#123; args: [ &#x27;--proxy-server=127.0.0.1:9876&#x27;, // Use proxy for localhost URLs &#x27;--proxy-bypass-list=&lt;-loopback&gt;&#x27;, ], &#125;); 等待页面跳转完成 有的页面需要跳转，需要等待完全跳转完才继续进行下一步操作时可以用 page.waitForNavigation 完成 123const navigationPromise = page.waitForNavigation();await navigationPromise;// 多次使用 await navigationPromise; 直到完全打开一个页面 使用 page.goto(url, options) 打开一个页面时，可以通过 options 对象配置超时时间 timeout(单位毫秒)，waitUntil 配置什么时候算打开完成，选项有 load - 页面的load事件触发时 domcontentloaded - 页面的 DOMContentLoaded 事件触发时 networkidle0 - 不再有网络连接时触发（至少500毫秒后） networkidle2 - 只有2个网络连接时触发（至少500毫秒后） 页面内执行 js 方法 有时候想在页面执行一段 js 方法，比如模拟下拉，可以使用 page.evaluate 方法，代码如下 12345678910111213// 传入 num 用来限制滚动多少秒page.evaluate(num =&gt; &#123; let times = 0; const distance = 100; const timer = setInterval(() =&gt; &#123; //滚动条向下滚动 distance window.scrollBy(0, distance); times += 1 if (times &gt;= num) &#123; clearInterval(timer) &#125; &#125;, 1000);&#125;, num) 未完待续~","categories":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"使用github-action自动部署hexo博客，并配置免费cdn加速访问","slug":"notes/use-github-action-and-jsdelivr-cdn-to-auto-deploy-and-speed-up-hexo-blog","date":"2021-02-14T09:02:47.000Z","updated":"2021-07-12T02:53:55.205Z","comments":true,"path":"2021/02/14/notes/use-github-action-and-jsdelivr-cdn-to-auto-deploy-and-speed-up-hexo-blog/","link":"","permalink":"https://techub.pw/2021/02/14/notes/use-github-action-and-jsdelivr-cdn-to-auto-deploy-and-speed-up-hexo-blog/","excerpt":"","text":"安装 hexo 按照官方文档创建一个博客 https://hexo.io/zh-cn/docs/ 创建两个仓库，一个名为 blog_name 的仓库用来放 hexo 博客原始文件，一个名为 your_github_name.github.io 的仓库用来放生成好的静态站点 修改 _config.yml 文件的 deploy 配置 1234deploy: type: &#x27;git&#x27; repo: &#x27;git@github.com:your_github_name/your_github_name.github.io.git&#x27; branch: &#x27;master&#x27; 在本地执行 hexo deploy 后就会自动在本地生成静态文件并推送到 your_github_name.github.io 这个仓库，然后在该仓库的设置中开启 GitHub Pages，随后访问 http://your_github_name.github.io 就能看到你的博客 编写 github actiongithub action 是 github 官方的 ci 工具，可以利用它实现推送 blog_name 仓库时，自动借助 github 的机器远程执行 hexo deploy 来部署博客，这样只需要写完博客推送一下就行 在远程机器上要推送，需要配置一下 deploy key，但是为了防止直接写在配置文件中被别人获取，可以填写在 blog_name 仓库的 设置=&gt;Secrets 中，Key 为 ACTION_DEPLOY_KEY，Value 为 ~/.ssh/id_rsa 中的内容 在 blog_name 仓库页 Actions 页面新建一个 workflow 文件，填入下面的内容 12345678910111213141516171819202122232425262728293031323334353637383940name: Deploy Blogon: [push] # 当有新push时运行jobs: build: # 一项叫做build的任务 runs-on: ubuntu-latest # 在最新版的Ubuntu系统下运行 steps: - name: Checkout # 将仓库内master分支的内容下载到工作目录 uses: actions/checkout@v1 # 脚本来自 https://github.com/actions/checkout - name: Use Node.js 10.x # 配置Node环境 uses: actions/setup-node@v1 # 配置脚本来自 https://github.com/actions/setup-node with: node-version: &quot;10.x&quot; - name: Setup Hexo env env: ACTION_DEPLOY_KEY: $&#123;&#123; secrets.ACTION_DEPLOY_KEY &#125;&#125; run: | # set up private key for deploy mkdir -p ~/.ssh/ echo &quot;$ACTION_DEPLOY_KEY&quot; | tr -d &#x27;\\r&#x27; &gt; ~/.ssh/id_rsa # 配置秘钥 chmod 600 ~/.ssh/id_rsa ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts # set git infomation git config --global user.name &#x27;your_name&#x27; # 换成你自己的邮箱和名字 git config --global user.email &#x27;your_name@email.com&#x27; # install dependencies npm i -g hexo-cli # 安装hexo npm i - name: Deploy run: | # publish hexo generate # 执行部署程序 hexo deploy 配置 cdn 和自定义域名完成上面两步就能实现推送博客仓库时，自动部署静态站点的工作 访问博客过程中发现 github 的速度较慢，于是借助免费 cdn jsdelivr 来加速一些静态资源，github 仓库中的文件天然就能通过 jsdelivr链接访问到，比如你的 your_github_name.github.io 仓库中的 css/style.css 文件对应的 jsdelivr 链接就是 https://cdn.jsdelivr.net/gh/your_github_name/your_github_name.github.io@master/css/style.css 利用上述 cdn 原理，可以在 hexo generate 后通过替换 html 代码中资源链接的方式来使用 cdn，比如我要替换 js 的路径，使用 sed 命令将所有 html 文件中 /src=&quot;/js 开头的资源文件前面替换加上 jsdelivr 的路径 12$ find . -type f -name *.html | \\xargs sed -i &#x27;s/src=&quot;\\/js\\//src=&quot;https:\\/\\/cdn.jsdelivr.net\\/gh\\/your_github_name/your_github_name.github.io@master\\/js\\//g&#x27; 同理可以替换 css 等其他资源，将相关代码填在 actions 中 hexo generate 和 hexo deploy 之间，在 action 执行的时候会完成替换 另外，如果想要配置自定义域名，需要在域名中添加一条 cname 的解析指向 your_github_name.github.io 域名，并在站点 source 目录中添加一个 CNAME 文件并填上你的域名，最后在 GitHub Pages 设置中填上并开启自定义域名","categories":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"算法","slug":"算法","permalink":"https://techub.pw/categories/%E7%AE%97%E6%B3%95/"},{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"动态规划","slug":"动态规划","permalink":"https://techub.pw/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"随笔","slug":"随笔","permalink":"https://techub.pw/tags/%E9%9A%8F%E7%AC%94/"}]}